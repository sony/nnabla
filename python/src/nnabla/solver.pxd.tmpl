# Copyright (c) 2017 Sony Corporation. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# *WARNING*
# THIS FILE IS AUTO-GENERATED BY CODE GENERATOR.
# PLEASE DO NOT EDIT THIS FILE BY HAND!
# If you want to modify this file, edit following files.
# - python/src/nnabla/solver.pyx.tmpl
# - build-tools/code_generator/generate.py

from libcpp.vector cimport vector
from libcpp.pair cimport pair
from libcpp.unordered_map cimport unordered_map
from libcpp.string cimport string
from libcpp.memory cimport shared_ptr
from libcpp cimport bool as cpp_bool
cimport _variable
from _variable cimport CVariable, CContext, dtypes


cdef extern from "nbla/solver.hpp" namespace "nbla":
    cdef cppclass CSolverState "nbla::Solver::SolverState":
        CSolverState() except + 
        unordered_map[string, shared_ptr[CVariable]] pstate
        int t

    cdef cppclass CSolver "nbla::Solver":
        void zero_grad() nogil except +
        void set_parameters(const vector[pair[string, shared_ptr[CVariable]]] & params,
                            cpp_bool reset, cpp_bool retain_state) except +
        void remove_parameters(const vector[string] & keys) except +
        void clear_parameters() except +
        vector[pair[string, shared_ptr[CVariable]]] get_parameters() except +
        vector[pair[string, CSolverState]] get_states() except +
        void set_states(vector[pair[string, CSolverState]]) except +
        void update() nogil except +
        void weight_decay(float decay_rate) nogil except +
        cpp_bool check_inf_grad() nogil except +
        cpp_bool check_nan_grad() nogil except +
        cpp_bool check_inf_or_nan_grad() nogil except +
        void scale_grad(float scale) nogil except +
        string name() except +
        float learning_rate() except +
        void set_learning_rate(float learning_rate) except +
<%
from utils.type_conv import type_from_proto
%>
%for solver_name, solver in solver_info.items():
cdef extern from "nbla/solver/${solver['snake_name']}.hpp" namespace "nbla":
    shared_ptr[CSolver] create_${solver_name}Solver(
        const CContext &, ${', '.join(map(lambda kv: '{} {}'.format(type_from_proto[kv[1]['type']]['pyx'], kv[0]), solver['arguments'].items()))}) except +
%endfor

cdef class Solver:

    cdef shared_ptr[CSolver] solver
    cdef CSolver * solverp
    cdef public object info

    @staticmethod
    cdef create(shared_ptr[CSolver] solver, info)
