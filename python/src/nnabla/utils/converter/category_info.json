{
    "categories": {
        "Neural Network Layer": {
            "Affine": {
                "name": "Affine",
                "snakecase_name": "affine",
                "input": {
                    "x": {},
                    "weight": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "bias": {
                        "Options": [
                            "Optional",
                            "Parameter"
                        ]
                    }
                },
                "argument": {
                    "base_axis": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Convolution": {
                "name": "Convolution",
                "snakecase_name": "convolution",
                "input": {
                    "x": {},
                    "weight": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "bias": {
                        "Options": [
                            "Optional",
                            "Parameter"
                        ]
                    }
                },
                "argument": {
                    "base_axis": {
                        "Type": "int64"
                    },
                    "pad": {
                        "Type": "Shape"
                    },
                    "stride": {
                        "Type": "Shape"
                    },
                    "dilation": {
                        "Type": "Shape"
                    },
                    "group": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "DepthwiseConvolution": {
                "name": "DepthwiseConvolution",
                "snakecase_name": "depthwise_convolution",
                "input": {
                    "x": {},
                    "weight": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "bias": {
                        "Options": [
                            "Optional",
                            "Parameter"
                        ]
                    }
                },
                "argument": {
                    "base_axis": {
                        "Type": "int64"
                    },
                    "pad": {
                        "Type": "Shape"
                    },
                    "stride": {
                        "Type": "Shape"
                    },
                    "dilation": {
                        "Type": "Shape"
                    },
                    "multiplier": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Deconvolution": {
                "name": "Deconvolution",
                "snakecase_name": "deconvolution",
                "input": {
                    "x": {},
                    "weight": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "bias": {
                        "Options": [
                            "Optional",
                            "Parameter"
                        ]
                    }
                },
                "argument": {
                    "base_axis": {
                        "Type": "int64"
                    },
                    "pad": {
                        "Type": "Shape"
                    },
                    "stride": {
                        "Type": "Shape"
                    },
                    "dilation": {
                        "Type": "Shape"
                    },
                    "group": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "MaxPooling": {
                "name": "MaxPooling",
                "snakecase_name": "max_pooling",
                "input": {
                    "x": {}
                },
                "argument": {
                    "kernel": {
                        "Type": "Shape"
                    },
                    "stride": {
                        "Type": "Shape"
                    },
                    "ignore_border": {
                        "Type": "bool"
                    },
                    "pad": {
                        "Type": "Shape"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "AveragePooling": {
                "name": "AveragePooling",
                "snakecase_name": "average_pooling",
                "input": {
                    "x": {}
                },
                "argument": {
                    "kernel": {
                        "Type": "Shape"
                    },
                    "stride": {
                        "Type": "Shape"
                    },
                    "ignore_border": {
                        "Type": "bool"
                    },
                    "pad": {
                        "Type": "Shape"
                    },
                    "including_pad": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "GlobalAveragePooling": {
                "name": "GlobalAveragePooling",
                "snakecase_name": "global_average_pooling",
                "input": {
                    "x": {}
                },
                "argument": {},
                "output": {
                    "y": {}
                }
            },
            "SumPooling": {
                "name": "SumPooling",
                "snakecase_name": "sum_pooling",
                "input": {
                    "x": {}
                },
                "argument": {
                    "kernel": {
                        "Type": "Shape"
                    },
                    "stride": {
                        "Type": "Shape"
                    },
                    "ignore_border": {
                        "Type": "bool"
                    },
                    "pad": {
                        "Type": "Shape"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Unpooling": {
                "name": "Unpooling",
                "snakecase_name": "unpooling",
                "input": {
                    "x": {}
                },
                "argument": {
                    "kernel": {
                        "Type": "Shape"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Embed": {
                "name": "Embed",
                "snakecase_name": "embed",
                "input": {
                    "x0": {
                        "Options": [
                            "Integer"
                        ]
                    },
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            }
        },
        "Neural Network Activation Functions": {
            "Sigmoid": {
                "name": "Sigmoid",
                "snakecase_name": "sigmoid",
                "input": {
                    "x": {}
                },
                "output": {
                    "y": {}
                }
            },
            "Swish": {
                "name": "Swish",
                "snakecase_name": "swish",
                "input": {
                    "x": {}
                },
                "output": {
                    "y": {}
                }
            },
            "Tanh": {
                "name": "Tanh",
                "snakecase_name": "tanh",
                "input": {
                    "x": {}
                },
                "output": {
                    "y": {}
                }
            },
            "ReLU": {
                "name": "ReLU",
                "snakecase_name": "relu",
                "input": {
                    "x": {}
                },
                "argument": {
                    "inplace": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "LeakyReLU": {
                "name": "LeakyReLU",
                "snakecase_name": "leaky_relu",
                "input": {
                    "x": {}
                },
                "argument": {
                    "alpha": {
                        "Type": "float"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Softmax": {
                "name": "Softmax",
                "snakecase_name": "softmax",
                "input": {
                    "x": {}
                },
                "argument": {
                    "axis": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "ELU": {
                "name": "ELU",
                "snakecase_name": "elu",
                "input": {
                    "x": {}
                },
                "argument": {
                    "alpha": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "SELU": {
                "name": "SELU",
                "snakecase_name": "selu",
                "input": {
                    "x": {}
                },
                "argument": {
                    "scale": {
                        "Type": "double"
                    },
                    "alpha": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "CReLU": {
                "name": "CReLU",
                "snakecase_name": "crelu",
                "input": {
                    "x": {}
                },
                "argument": {
                    "axis": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "CELU": {
                "name": "CELU",
                "snakecase_name": "celu",
                "input": {
                    "x": {}
                },
                "argument": {
                    "alpha": {
                        "Type": "double"
                    },
                    "axis": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "PReLU": {
                "name": "PReLU",
                "snakecase_name": "prelu",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "argument": {
                    "base_axis": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            }
        },
        "Normalization": {
            "BatchNormalization": {
                "name": "BatchNormalization",
                "snakecase_name": "batch_normalization",
                "input": {
                    "x": {},
                    "beta": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "gamma": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "mean": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "variance": {
                        "Options": [
                            "Parameter"
                        ]
                    }
                },
                "argument": {
                    "axes": {
                        "Type": "repeated int64"
                    },
                    "decay_rate": {
                        "Type": "float"
                    },
                    "eps": {
                        "Type": "float"
                    },
                    "batch_stat": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "MeanSubtraction": {
                "name": "MeanSubtraction",
                "snakecase_name": "mean_subtraction",
                "input": {
                    "x": {},
                    "rmean": {},
                    "t": {}
                },
                "argument": {
                    "base_axis": {
                        "Type": "int64"
                    },
                    "update_running_mean": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            }
        },
        "Reduction": {
            "Sum": {
                "name": "Sum",
                "snakecase_name": "sum",
                "input": {
                    "x": {}
                },
                "argument": {
                    "axes": {
                        "Type": "repeated int64"
                    },
                    "keep_dims": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Mean": {
                "name": "Mean",
                "snakecase_name": "mean",
                "input": {
                    "x": {}
                },
                "argument": {
                    "axes": {
                        "Type": "repeated int64"
                    },
                    "keep_dims": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Max": {
                "name": "Max",
                "snakecase_name": "max",
                "input": {
                    "x": {}
                },
                "argument": {
                    "axes": {
                        "Type": "repeated int64"
                    },
                    "keep_dims": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Min": {
                "name": "Min",
                "snakecase_name": "min",
                "input": {
                    "x": {}
                },
                "argument": {
                    "axes": {
                        "Type": "repeated int64"
                    },
                    "keep_dims": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Prod": {
                "name": "Prod",
                "snakecase_name": "prod",
                "input": {
                    "x": {}
                },
                "argument": {
                    "axes": {
                        "Type": "repeated int64"
                    },
                    "keep_dims": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "ReduceSum": {
                "name": "ReduceSum",
                "snakecase_name": "reduce_sum",
                "input": {
                    "x": {}
                },
                "output": {
                    "y": {}
                }
            },
            "ReduceMean": {
                "name": "ReduceMean",
                "snakecase_name": "reduce_mean",
                "input": {
                    "x": {}
                },
                "output": {
                    "y": {}
                }
            }
        },
        "Arithmetic": {
            "Add2": {
                "name": "Add2",
                "snakecase_name": "add2",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "argument": {
                    "inplace": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "BcAdd2": {
                "name": "BcAdd2",
                "snakecase_name": "bc_add2",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "Sub2": {
                "name": "Sub2",
                "snakecase_name": "sub2",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "Mul2": {
                "name": "Mul2",
                "snakecase_name": "mul2",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "Div2": {
                "name": "Div2",
                "snakecase_name": "div2",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "Pow2": {
                "name": "Pow2",
                "snakecase_name": "pow2",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "AddScalar": {
                "name": "AddScalar",
                "snakecase_name": "add_scalar",
                "input": {
                    "x": {}
                },
                "argument": {
                    "val": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "MulScalar": {
                "name": "MulScalar",
                "snakecase_name": "mul_scalar",
                "input": {
                    "x": {}
                },
                "argument": {
                    "val": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "PowScalar": {
                "name": "PowScalar",
                "snakecase_name": "pow_scalar",
                "input": {
                    "x": {}
                },
                "argument": {
                    "val": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "RSubScalar": {
                "name": "RSubScalar",
                "snakecase_name": "r_sub_scalar",
                "input": {
                    "x": {}
                },
                "argument": {
                    "val": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "RDivScalar": {
                "name": "RDivScalar",
                "snakecase_name": "r_div_scalar",
                "input": {
                    "x": {}
                },
                "argument": {
                    "val": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "RPowScalar": {
                "name": "RPowScalar",
                "snakecase_name": "r_pow_scalar",
                "input": {
                    "x": {}
                },
                "argument": {
                    "val": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            }
        },
        "Logical": {
            "Sign": {
                "name": "Sign",
                "snakecase_name": "sign",
                "input": {
                    "x": {}
                },
                "argument": {
                    "alpha": {
                        "Type": "float"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Minimum2": {
                "name": "Minimum2",
                "snakecase_name": "minimum2",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "Maximum2": {
                "name": "Maximum2",
                "snakecase_name": "maximum2",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "MinimumScalar": {
                "name": "MinimumScalar",
                "snakecase_name": "minimum_scalar",
                "input": {
                    "x": {}
                },
                "argument": {
                    "val": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "MaximumScalar": {
                "name": "MaximumScalar",
                "snakecase_name": "maximum_scalar",
                "input": {
                    "x": {}
                },
                "argument": {
                    "val": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "LogicalAnd": {
                "name": "LogicalAnd",
                "snakecase_name": "logical_and",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "LogicalOr": {
                "name": "LogicalOr",
                "snakecase_name": "logical_or",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "LogicalXor": {
                "name": "LogicalXor",
                "snakecase_name": "logical_xor",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "Equal": {
                "name": "Equal",
                "snakecase_name": "equal",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "NotEqual": {
                "name": "NotEqual",
                "snakecase_name": "not_equal",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "GreaterEqual": {
                "name": "GreaterEqual",
                "snakecase_name": "greater_equal",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "Greater": {
                "name": "Greater",
                "snakecase_name": "greater",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "LessEqual": {
                "name": "LessEqual",
                "snakecase_name": "less_equal",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "Less": {
                "name": "Less",
                "snakecase_name": "less",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "LogicalAndScalar": {
                "name": "LogicalAndScalar",
                "snakecase_name": "logical_and_scalar",
                "input": {
                    "x0": {}
                },
                "argument": {
                    "val": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "LogicalOrScalar": {
                "name": "LogicalOrScalar",
                "snakecase_name": "logical_or_scalar",
                "input": {
                    "x0": {}
                },
                "argument": {
                    "val": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "LogicalXorScalar": {
                "name": "LogicalXorScalar",
                "snakecase_name": "logical_xor_scalar",
                "input": {
                    "x0": {}
                },
                "argument": {
                    "val": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "EqualScalar": {
                "name": "EqualScalar",
                "snakecase_name": "equal_scalar",
                "input": {
                    "x0": {}
                },
                "argument": {
                    "val": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "NotEqualScalar": {
                "name": "NotEqualScalar",
                "snakecase_name": "not_equal_scalar",
                "input": {
                    "x0": {}
                },
                "argument": {
                    "val": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "GreaterEqualScalar": {
                "name": "GreaterEqualScalar",
                "snakecase_name": "greater_equal_scalar",
                "input": {
                    "x0": {}
                },
                "argument": {
                    "val": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "GreaterScalar": {
                "name": "GreaterScalar",
                "snakecase_name": "greater_scalar",
                "input": {
                    "x0": {}
                },
                "argument": {
                    "val": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "LessEqualScalar": {
                "name": "LessEqualScalar",
                "snakecase_name": "less_equal_scalar",
                "input": {
                    "x0": {}
                },
                "argument": {
                    "val": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "LessScalar": {
                "name": "LessScalar",
                "snakecase_name": "less_scalar",
                "input": {
                    "x0": {}
                },
                "argument": {
                    "val": {
                        "Type": "double"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "LogicalNot": {
                "name": "LogicalNot",
                "snakecase_name": "logical_not",
                "input": {
                    "x0": {}
                },
                "output": {
                    "y": {}
                }
            }
        },
        "Math": {
            "Constant": {
                "name": "Constant",
                "snakecase_name": "constant",
                "input": {},
                "argument": {
                    "val": {
                        "Type": "float"
                    },
                    "shape": {
                        "Type": "Shape"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Abs": {
                "name": "Abs",
                "snakecase_name": "abs",
                "input": {
                    "x": {}
                },
                "output": {
                    "y": {}
                }
            },
            "Exp": {
                "name": "Exp",
                "snakecase_name": "exp",
                "input": {
                    "x": {}
                },
                "output": {
                    "y": {}
                }
            },
            "Log": {
                "name": "Log",
                "snakecase_name": "log",
                "input": {
                    "x": {}
                },
                "output": {
                    "y": {}
                }
            },
            "Identity": {
                "name": "Identity",
                "snakecase_name": "identity",
                "input": {
                    "x": {}
                },
                "output": {
                    "y": {}
                }
            },
            "BatchMatmul": {
                "name": "BatchMatmul",
                "snakecase_name": "batch_matmul",
                "input": {
                    "a": {},
                    "b": {}
                },
                "argument": {
                    "transpose_a": {
                        "Type": "bool"
                    },
                    "transpose_b": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            }
        },
        "Array Manipulation": {
            "Concatenate": {
                "name": "Concatenate",
                "snakecase_name": "concatenate",
                "input": {
                    "x": {
                        "Options": [
                            "Variadic",
                            "Parameter"
                        ]
                    }
                },
                "argument": {
                    "axis": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Split": {
                "name": "Split",
                "snakecase_name": "split",
                "input": {
                    "x": {}
                },
                "argument": {
                    "axis": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {
                        "Options": [
                            "Variadic",
                            "Parameter"
                        ]
                    }
                }
            },
            "Stack": {
                "name": "Stack",
                "snakecase_name": "stack",
                "input": {
                    "x": {
                        "Options": [
                            "Variadic",
                            "Parameter"
                        ]
                    }
                },
                "argument": {
                    "axis": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Slice": {
                "name": "Slice",
                "snakecase_name": "slice",
                "input": {
                    "x": {}
                },
                "argument": {
                    "start": {
                        "Type": "repeated int64"
                    },
                    "stop": {
                        "Type": "repeated int64"
                    },
                    "step": {
                        "Type": "repeated int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Transpose": {
                "name": "Transpose",
                "snakecase_name": "transpose",
                "input": {
                    "x": {}
                },
                "argument": {
                    "axes": {
                        "Type": "repeated int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Broadcast": {
                "name": "Broadcast",
                "snakecase_name": "broadcast",
                "input": {
                    "x": {}
                },
                "argument": {
                    "shape": {
                        "Type": "Shape"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "BroadcastTo": {
                "name": "BroadcastTo",
                "snakecase_name": "broadcast_to",
                "input": {
                    "x": {},
                    "y": {}
                },
                "argument": {
                    "axis": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "z": {}
                }
            },
            "OneHot": {
                "name": "OneHot",
                "snakecase_name": "one_hot",
                "input": {
                    "x": {
                        "Options": [
                            "Integer"
                        ]
                    }
                },
                "argument": {
                    "shape": {
                        "Type": "Shape"
                    }
                },
                "output": {
                    "output": {}
                }
            },
            "Flip": {
                "name": "Flip",
                "snakecase_name": "flip",
                "input": {
                    "x": {}
                },
                "argument": {
                    "axes": {
                        "Type": "repeated int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Shift": {
                "name": "Shift",
                "snakecase_name": "shift",
                "input": {
                    "x": {}
                },
                "argument": {
                    "shifts": {
                        "Type": "repeated int64"
                    },
                    "border_mode": {
                        "Type": "string",
                        "TypeSelection": [
                            "nearest",
                            "reflect"
                        ]
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Reshape": {
                "name": "Reshape",
                "snakecase_name": "reshape",
                "input": {
                    "x": {}
                },
                "argument": {
                    "shape": {
                        "Type": "Shape"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "MatrixDiag": {
                "name": "MatrixDiag",
                "snakecase_name": "matrix_diag",
                "input": {
                    "x": {}
                },
                "output": {
                    "y": {}
                }
            },
            "MatrixDiagPart": {
                "name": "MatrixDiagPart",
                "snakecase_name": "matrix_diag_part",
                "input": {
                    "x": {}
                },
                "output": {
                    "y": {}
                }
            }
        },
        "Stochasticity": {
            "Dropout": {
                "name": "Dropout",
                "snakecase_name": "dropout",
                "input": {
                    "x": {}
                },
                "argument": {
                    "p": {
                        "Type": "double"
                    },
                    "seed": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Rand": {
                "name": "Rand",
                "snakecase_name": "rand",
                "input": {},
                "argument": {
                    "low": {
                        "Type": "float"
                    },
                    "high": {
                        "Type": "float"
                    },
                    "shape": {
                        "Type": "Shape"
                    },
                    "seed": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Randint": {
                "name": "Randint",
                "snakecase_name": "randint",
                "input": {},
                "argument": {
                    "low": {
                        "Type": "int64"
                    },
                    "high": {
                        "Type": "int64"
                    },
                    "shape": {
                        "Type": "Shape"
                    },
                    "seed": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {
                        "Options": [
                            "Integer"
                        ]
                    }
                }
            },
            "Randn": {
                "name": "Randn",
                "snakecase_name": "randn",
                "input": {},
                "argument": {
                    "mu": {
                        "Type": "float"
                    },
                    "sigma": {
                        "Type": "float"
                    },
                    "shape": {
                        "Type": "Shape"
                    },
                    "seed": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "RandomCrop": {
                "name": "RandomCrop",
                "snakecase_name": "random_crop",
                "input": {
                    "x": {}
                },
                "argument": {
                    "shape": {
                        "Type": "Shape"
                    },
                    "base_axis": {
                        "Type": "int64"
                    },
                    "seed": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "RandomFlip": {
                "name": "RandomFlip",
                "snakecase_name": "random_flip",
                "input": {
                    "x": {}
                },
                "argument": {
                    "axes": {
                        "Type": "repeated int64"
                    },
                    "base_axis": {
                        "Type": "int64"
                    },
                    "seed": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "RandomShift": {
                "name": "RandomShift",
                "snakecase_name": "random_shift",
                "input": {
                    "x": {}
                },
                "argument": {
                    "shifts": {
                        "Type": "repeated int64"
                    },
                    "border_mode": {
                        "Type": "string",
                        "TypeSelection": [
                            "nearest",
                            "reflect"
                        ]
                    },
                    "base_axis": {
                        "Type": "int64"
                    },
                    "seed": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "ImageAugmentation": {
                "name": "ImageAugmentation",
                "snakecase_name": "image_augmentation",
                "input": {
                    "x": {}
                },
                "argument": {
                    "shape": {
                        "Type": "Shape"
                    },
                    "pad": {
                        "Type": "Shape"
                    },
                    "min_scale": {
                        "Type": "float"
                    },
                    "max_scale": {
                        "Type": "float"
                    },
                    "angle": {
                        "Type": "float"
                    },
                    "aspect_ratio": {
                        "Type": "float"
                    },
                    "distortion": {
                        "Type": "float"
                    },
                    "flip_lr": {
                        "Type": "bool"
                    },
                    "flip_ud": {
                        "Type": "bool"
                    },
                    "brightness": {
                        "Type": "float"
                    },
                    "brightness_each": {
                        "Type": "bool"
                    },
                    "contrast": {
                        "Type": "float"
                    },
                    "contrast_center": {
                        "Type": "float"
                    },
                    "contrast_each": {
                        "Type": "bool"
                    },
                    "noise": {
                        "Type": "float"
                    },
                    "seed": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            }
        },
        "Loss Functions": {
            "SigmoidCrossEntropy": {
                "name": "SigmoidCrossEntropy",
                "snakecase_name": "sigmoid_cross_entropy",
                "input": {
                    "x": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "target": {
                        "Options": [
                            "Integer",
                            "Parameter"
                        ]
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "BinaryCrossEntropy": {
                "name": "BinaryCrossEntropy",
                "snakecase_name": "binary_cross_entropy",
                "input": {
                    "x": {},
                    "target": {}
                },
                "output": {
                    "y": {}
                }
            },
            "SoftmaxCrossEntropy": {
                "name": "SoftmaxCrossEntropy",
                "snakecase_name": "softmax_cross_entropy",
                "input": {
                    "x": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "target": {
                        "Options": [
                            "Integer",
                            "Parameter"
                        ]
                    }
                },
                "argument": {
                    "axis": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "CategoricalCrossEntropy": {
                "name": "CategoricalCrossEntropy",
                "snakecase_name": "categorical_cross_entropy",
                "input": {
                    "x": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "target": {
                        "Options": [
                            "Integer",
                            "Parameter"
                        ]
                    }
                },
                "argument": {
                    "axis": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "SquaredError": {
                "name": "SquaredError",
                "snakecase_name": "squared_error",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "AbsoluteError": {
                "name": "AbsoluteError",
                "snakecase_name": "absolute_error",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "output": {
                    "y": {}
                }
            },
            "HuberLoss": {
                "name": "HuberLoss",
                "snakecase_name": "huber_loss",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "argument": {
                    "delta": {
                        "Type": "float"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "EpsilonInsensitiveLoss": {
                "name": "EpsilonInsensitiveLoss",
                "snakecase_name": "epsilon_insensitive_loss",
                "input": {
                    "x0": {},
                    "x1": {}
                },
                "argument": {
                    "epsilon": {
                        "Type": "float"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "KLMultinomial": {
                "name": "KLMultinomial",
                "snakecase_name": "kl_multinomial",
                "input": {
                    "p": {},
                    "q": {}
                },
                "argument": {
                    "base_axis": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "D": {}
                }
            }
        },
        "Quantization Neural Network Layers": {
            "BinarySigmoid": {
                "name": "BinarySigmoid",
                "snakecase_name": "binary_sigmoid",
                "input": {
                    "x": {}
                },
                "output": {
                    "y": {}
                }
            },
            "BinaryTanh": {
                "name": "BinaryTanh",
                "snakecase_name": "binary_tanh",
                "input": {
                    "x": {}
                },
                "output": {
                    "y": {}
                }
            },
            "BinaryConnectAffine": {
                "name": "BinaryConnectAffine",
                "snakecase_name": "binary_connect_affine",
                "input": {
                    "x": {},
                    "weight": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "binary_weight": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "bias": {
                        "Options": [
                            "Optional",
                            "Parameter"
                        ]
                    }
                },
                "argument": {
                    "base_axis": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "BinaryConnectConvolution": {
                "name": "BinaryConnectConvolution",
                "snakecase_name": "binary_connect_convolution",
                "input": {
                    "x": {},
                    "weight": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "binary_weight": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "bias": {
                        "Options": [
                            "Optional",
                            "Parameter"
                        ]
                    }
                },
                "argument": {
                    "base_axis": {
                        "Type": "int64"
                    },
                    "pad": {
                        "Type": "Shape"
                    },
                    "stride": {
                        "Type": "Shape"
                    },
                    "dilation": {
                        "Type": "Shape"
                    },
                    "group": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "BinaryWeightAffine": {
                "name": "BinaryWeightAffine",
                "snakecase_name": "binary_weight_affine",
                "input": {
                    "x": {},
                    "weight": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "binary_weight": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "alpha": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "bias": {
                        "Options": [
                            "Optional",
                            "Parameter"
                        ]
                    }
                },
                "argument": {
                    "base_axis": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "BinaryWeightConvolution": {
                "name": "BinaryWeightConvolution",
                "snakecase_name": "binary_weight_convolution",
                "input": {
                    "x": {},
                    "weight": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "binary_weight": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "alpha": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "bias": {
                        "Options": [
                            "Optional",
                            "Parameter"
                        ]
                    }
                },
                "argument": {
                    "base_axis": {
                        "Type": "int64"
                    },
                    "pad": {
                        "Type": "Shape"
                    },
                    "stride": {
                        "Type": "Shape"
                    },
                    "dilation": {
                        "Type": "Shape"
                    },
                    "group": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "INQAffine": {
                "name": "INQAffine",
                "snakecase_name": "inq_affine",
                "input": {
                    "x": {},
                    "weight": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "indicator_fixedweights": {
                        "Options": [
                            "Integer",
                            "Parameter"
                        ]
                    },
                    "bias": {
                        "Options": [
                            "Optional",
                            "Parameter"
                        ]
                    }
                },
                "argument": {
                    "base_axis": {
                        "Type": "int64"
                    },
                    "num_bits": {
                        "Type": "int64"
                    },
                    "inq_iterations": {
                        "Type": "repeated int64"
                    },
                    "selection_algorithm": {
                        "Type": "string",
                        "TypeSelection": [
                            "largest_abs",
                            "random"
                        ]
                    },
                    "seed": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "INQConvolution": {
                "name": "INQConvolution",
                "snakecase_name": "inq_convolution",
                "input": {
                    "x": {},
                    "weight": {
                        "Options": [
                            "Parameter"
                        ]
                    },
                    "indicator_fixedweights": {
                        "Options": [
                            "Integer",
                            "Parameter"
                        ]
                    },
                    "bias": {
                        "Options": [
                            "Optional",
                            "Parameter"
                        ]
                    }
                },
                "argument": {
                    "base_axis": {
                        "Type": "int64"
                    },
                    "pad": {
                        "Type": "Shape"
                    },
                    "stride": {
                        "Type": "Shape"
                    },
                    "dilation": {
                        "Type": "Shape"
                    },
                    "group": {
                        "Type": "int64"
                    },
                    "num_bits": {
                        "Type": "int64"
                    },
                    "inq_iterations": {
                        "Type": "repeated int64"
                    },
                    "selection_algorithm": {
                        "Type": "string",
                        "TypeSelection": [
                            "largest_abs",
                            "random"
                        ]
                    },
                    "seed": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "FixedPointQuantize": {
                "name": "FixedPointQuantize",
                "snakecase_name": "fixed_point_quantize",
                "input": {
                    "x": {}
                },
                "argument": {
                    "sign": {
                        "Type": "bool"
                    },
                    "n": {
                        "Type": "int64"
                    },
                    "delta": {
                        "Type": "float"
                    },
                    "ste_fine_grained": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Pow2Quantize": {
                "name": "Pow2Quantize",
                "snakecase_name": "pow2_quantize",
                "input": {
                    "x": {}
                },
                "argument": {
                    "sign": {
                        "Type": "bool"
                    },
                    "with_zero": {
                        "Type": "bool"
                    },
                    "n": {
                        "Type": "int64"
                    },
                    "m": {
                        "Type": "int64"
                    },
                    "ste_fine_grained": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            }
        },
        "Validation": {
            "TopNError": {
                "name": "TopNError",
                "snakecase_name": "top_n_error",
                "input": {
                    "x": {},
                    "target": {
                        "Options": [
                            "Integer"
                        ]
                    }
                },
                "argument": {
                    "axis": {
                        "Type": "int64"
                    },
                    "n": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "output": {}
                }
            },
            "BinaryError": {
                "name": "BinaryError",
                "snakecase_name": "binary_error",
                "input": {
                    "x": {},
                    "target": {}
                },
                "output": {
                    "output": {}
                }
            },
            "ConfusionMatrix": {
                "name": "ConfusionMatrix",
                "snakecase_name": "confusion_matrix",
                "input": {
                    "x": {},
                    "target": {
                        "Options": [
                            "Integer"
                        ]
                    }
                },
                "argument": {
                    "axis": {
                        "Type": "int64"
                    }
                },
                "output": {
                    "output": {}
                }
            }
        },
        "Unsupported, Special Use": {
            "VATNoise": {
                "name": "VATNoise",
                "snakecase_name": "vat_noise",
                "input": {
                    "x": {},
                    "w": {}
                },
                "argument": {
                    "base_axis": {
                        "Type": "int64"
                    },
                    "eps": {
                        "Type": "float"
                    }
                },
                "output": {
                    "y": {}
                }
            },
            "Unlink": {
                "name": "Unlink",
                "snakecase_name": "unlink",
                "input": {
                    "x": {}
                },
                "output": {
                    "y": {}
                }
            },
            "Sink": {
                "name": "Sink",
                "snakecase_name": "sink",
                "input": {
                    "x": {
                        "Options": [
                            "Variadic"
                        ]
                    }
                },
                "argument": {
                    "one_input_grad": {
                        "Type": "bool"
                    }
                },
                "output": {
                    "y": {}
                }
            }
        }
    },
    "version": 1314015
}