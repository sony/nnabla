# Copyright (c) 2017 Sony Corporation. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# *WARNING*
# THIS FILE IS AUTO-GENERATED BY CODE GENERATOR.
# PLEASE DO NOT EDIT THIS FILE BY HAND!
# If you want to modify this file, edit following files.
# - python/src/nnabla/function.pyx.tmpl
# - build-tools/code_generator/generate.py

from libcpp.vector cimport vector
from libcpp.string cimport string
from libcpp.memory cimport shared_ptr, make_shared
from cython.operator cimport dereference
from libcpp cimport bool as cpp_bool
from libc.stdint cimport int64_t, intptr_t
cimport function
from function cimport CFunction, Variables, CgFunction
cimport _variable
from _variable cimport Variable as _Variable, CVariable, CgVariable, CContext
from _nd_array cimport NdArray
from _nd_array import NdArray
from _imperative cimport *
from _computation_graph cimport connect
# Numpy
import numpy as np
cimport numpy as np
np.import_array()
# CPython
from cpython cimport Py_INCREF, Py_DECREF


class Info:
    '''
    Empty class to store function information.
    '''
    pass


cdef cpp_bool allisinstance(varlist, cls):
    cdef int i
    cdef int size
    cdef cpp_bool ret
    size = len(varlist)
    ret = True
    for i in range(size):
        ret &= isinstance(varlist[i], cls)
    return ret

cdef vector[NdArrayPtr] list_to_vector_nd_array_force(varlist):
    from nnabla.variable import Variable
    cdef vector[NdArrayPtr] vec
    cdef int i
    cdef int size
    size = len(varlist)
    vec.resize(size)
    for i in range(size):
        v = varlist[i]
        if isinstance(v, Variable):
            v = v.data
        vec[i] = (<NdArray> v).arr
    return vec

cdef vector[NdArrayPtr] list_to_vector_nd_array(varlist):
    cdef vector[NdArrayPtr] vec
    cdef int i
    cdef int size
    size = len(varlist)
    vec.resize(size)
    for i in range(size):
        vec[i] = (<NdArray?> varlist[i]).arr
    return vec

cdef vector[CgVariablePtr] list_to_vector_cg_variable(varlist):
    cdef vector[CgVariablePtr] vec
    cdef int i
    cdef int size
    size = len(varlist)
    vec.resize(size)
    for i in range(size):
        vec[i] = (<_Variable?> varlist[i]).var
    return vec

cdef vector[CVariable*] list_to_vector_variable_p(varlist):
    cdef vector[CVariable*] vec
    cdef int i
    cdef int size
    size = len(varlist)
    vec.resize(size)
    for i in range(size):
        vec[i] = (<_Variable?> varlist[i]).varp.variable().get()
    return vec

cdef vector[cpp_bool] variables_to_prop_down_flags(varlist):
    cdef int i
    cdef int size = len(varlist)
    cdef vector[cpp_bool] ret
    for i in range(size):
        ret.push_back((<_Variable?>varlist[i]).varp.need_grad_state())
    return ret

cdef tuple vector_to_tuple_nd_array(const vector[NdArrayPtr] &vec):
    cdef int i
    cdef list ret = []
    for i in range(vec.size()):
        ret.append(NdArray.create(vec[i]))
    return tuple(ret)

cdef tuple vector_to_tuple_cg_variable(const vector[CgVariablePtr] &vec):
    cdef int i
    cdef list ret = []
    for i in range(vec.size()):
        ret.append(_Variable.create_from_cg_variable(<CgVariablePtr>vec[i]))
    return tuple(ret)

cdef class Function:
    '''Function interface class.

    Instances of :class:`nnabla.function.Function` are not directly created by users. It is indirectly
    created by the functions available in :mod:`nnabla.functions`. These functions
    return :class:`nnabla.Variable` (s) holding the created function instance as the
    parent property.

    '''


    @staticmethod
    cdef create(shared_ptr[CFunction] fun, info):
        f = Function()
        f.fun = make_shared[CgFunction](fun)
        f.funp = f.fun.get()
        info2 = {'name': info.type_name, 'args': info.args, 'tags': info.tags}
        f.funp.set_info(repr(info2).encode('ascii'))
        return f

    @staticmethod
    cdef create_from_c(CgFunctionPtr fun):
        f = Function()
        f.fun = fun
        f.funp = fun.get()
        info2 = eval(f.funp.info())
        info = Info()
        info.args = info2['args']
        info.type_name = info2['name']
        info.tags = info2['tags']
        f.info = info
        return f

    def __repr__(self):
        return self.name

    def __cinit__(self):
        self.info = None

    def __init__(self):
        pass

    def __richcmp__(self, other, int op):
        if op == 2:
            if isinstance(other, Function):
                return ( < Function > self).funp == ( < Function > other).funp
            return False
        elif op == 3:
            return not self.__richcmp__(other, 2)
        return False

    def __hash__(self):
        return hash(<intptr_t>((<Function>self).funp))

    @property
    def inputs(self):
        cdef vector[CgVariablePtr] v = self.funp.inputs()
        return [_Variable.create_from_cg_variable(i) for i in v]

    @property
    def outputs(self):
        cdef vector[CgVariablePtr] v = self.funp.outputs()
        return [_Variable.create_from_cg_variable(o) for o in v]

    def setup(self, inputs, outputs):
        self.funp.function().get().setup(
            list_to_vector_variable_p(inputs),
            list_to_vector_variable_p(outputs))

    def forward(self, inputs, outputs):
        self.funp.function().get().forward(
            list_to_vector_variable_p(inputs),
            list_to_vector_variable_p(outputs))

    def backward(self, inputs, outputs, accum=None):
        cdef vector[cpp_bool] caccum
        cdef int i
        cdef vector[cpp_bool] prop_down = variables_to_prop_down_flags(inputs)
        if accum is None:
            caccum.resize(len(inputs), True)
            # caccum.assign(len(inputs), True)
        else:
            caccum.resize(<size_t> (len(accum)))
            for i in range(<int>(len(accum))):
                caccum[i] = accum[i]
        self.funp.function().get().backward(
            list_to_vector_variable_p(inputs),
            list_to_vector_variable_p(outputs),
	    prop_down,
            caccum)

    @property
    def name(self):
        return self.funp.function().get().name()

    def min_outputs(self):
        return self.funp.function().get().min_outputs()

    def grad_depends_output_data(self, int i, int o):
        return self.funp.function().get().grad_depends_output_data(i, o)

    def inplace_data(self, int i):
        return self.funp.function().get().inplace_data(i)

    def inplace_data_with(self, int i):
        return self.funp.function().get().inplace_data_with(i)

    def inplace_grad(self, int i):
        return self.funp.function().get().inplace_grad(i)

    def inplace_grad_with(self, int i):
        return self.funp.function().get().inplace_grad_with(i)

    def _imperative_call(self, inputs, int n_outputs, outputs):
        cdef vector[NdArrayPtr] na_outputs
        if n_outputs < 0:
            n_outputs = self.funp.function().get().min_outputs()
        if outputs is None:
            outputs = []
        na_outputs = imperative_execute(
            self.funp.function(),
            list_to_vector_nd_array_force(inputs),
            n_outputs,
            list_to_vector_nd_array(outputs))
        if na_outputs.size() == 1:
            return NdArray.create(na_outputs[0])
        return vector_to_tuple_nd_array(na_outputs)

    def _cg_call(self, inputs, int n_outputs, outputs, cpp_bool execute):
        from nnabla.variable import Variable
        cdef vector[CgVariablePtr] cg_inputs 
        cdef vector[CgVariablePtr] cg_outputs
        assert allisinstance(inputs, Variable), "All inputs must be Variable. {}".format([type(i for i in inputs)])
        cg_inputs = list_to_vector_cg_variable(inputs)
        cg_outputs = connect(
            self.fun,
            cg_inputs,
            n_outputs,
            list_to_vector_nd_array(outputs),
            execute)
        if cg_outputs.size() == 1:
            return _Variable.create_from_cg_variable(<CgVariablePtr> cg_outputs[0])
        return vector_to_tuple_cg_variable(cg_outputs)

                                
    def __call__(self, *inputs, int n_outputs=-1, cpp_bool auto_forward=True, outputs=None):
        """
        """
        cdef int i
        if outputs is None:
            outputs = []
        if inputs:
            for i in range(len(inputs)):
                if isinstance(inputs[i], NdArray):
                    return self._imperative_call(inputs, n_outputs, outputs)
        return self._cg_call(inputs, n_outputs, outputs, auto_forward)

    @property
    def tags(self):
        """Experimental

        Get tags of the function.
        """
        info = eval(self.funp.info())
        return info['tags']

    @tags.setter
    def tags(self, tags):
        """Experimental

        Set tags to the function.
        """
        info = eval(self.funp.info())
        info['tags'] = tags
        self.funp.set_info(repr(info).encode('ascii'))
			
    """
    @property
    def in_types(self):
        return [np.PyArray_DescrNewFromType(<int> x) for x in self.funp.in_types()]

    @property
    def out_types(self):
        return [np.PyArray_DescrNewFromType(<int> x) for x in self.funp.out_types()]
    """

# ==============================================================================
# Python Function
# ---------------
#
# Python function uses Callback function implemented in C++.
# Callback function calls setup/forward/backward function registered ctor.
# From Python side, PythonFunction adds the following
# setup_callback, forward_callback and backward_callback functions at
# initialization which calls (setup|forward|backward)_impl method in a class
# derived from PythonFunction.
# ==============================================================================
cdef class UnsafeVariable:
    """This is a Python wrapper class for Variable class in C++.

    Note:
        that it is intended to be used only in PythonFunction. Copying
        a reference of this class to outside of Python Function is prohibited
        because the lifetime of C++ is not ensured after calling
        PythonFunction's method.
    """
    cdef CVariable *var

    @staticmethod
    cdef create(CVariable* v):
        obj = UnsafeVariable()
        obj.var = v
        return obj

    @property
    def shape(self):
        """Get shape of variable
        """
        return tuple(self.var.shape())

    @property
    def size(self):
        """Get size of variable
        """
        return self.var.size(-1)

    @property
    def ndim(self):
        """Get number of dimensions.
        """
        return self.var.ndim()

    def size_from_axis(self, axis=-1):
        """Get size followed by given axis is computed

        Args:
            axis (:obj:`int`, optional): -1 as default

        Returns:
            :obj:`int`

        """
        return self.var.size(axis)

    def reset_shape(self, shape, force=False):
        """Reset shape.

        NOTE:
            Users should not call this method. Usually developers call.
        """
        self.var.reshape(shape, force)

    @property
    def data(self):
        """Get data as ``NdArray``.

        Returns:
            :class:`~nnabla._nd_array.NdArray`
        """
        return NdArray.create(self.var.data())

    @property
    def grad(self):
        """Get grad as ``NdArray``.

        Returns:
            :class:`~nnabla._nd_array.NdArray`
        """
        return NdArray.create(self.var.grad())

    @property
    def d(self):
        """Get data as ``numpy.ndarray``.

        Returns:
            :obj:`numpy.ndarray`
        """
        return self.data.data

    @d.setter
    def d(self, value):
        """Set data as ``numpy.ndarray``.

        Args:
            value(:obj:`numpy.ndarray`)
        """
        self.data.data[...] = value

    @property
    def g(self):
        """Get grad as ``numpy.ndarray``.

        Returns:
            :obj:`numpy.ndarray`
        """
        return self.grad.data

    @g.setter
    def g(self, value):
        """Set grad as ``numpy.ndarray``.

        Args:
            value(:obj:`numpy.ndarray`)
        """
        self.grad.data[...] = value

cdef list to_unsafe_variables(const Variables &variables):
    cdef int i
    cdef list varlist = []
    for i in range(variables.size()):
        varlist.append(UnsafeVariable.create(variables[i]))
    return varlist

cdef void setup_callback(void *cself, const Variables &cinputs,
                         const Variables &coutputs) except+ with gil:
    cdef object self
    self = <object>cself

    # Create inputs and outputs
    inputs = to_unsafe_variables(cinputs)
    outputs = to_unsafe_variables(coutputs)

    # Call setup_impl in function.
    self.setup_impl(inputs, outputs)

cdef void forward_callback(void *cself, const Variables &cinputs,
                           const Variables &coutputs) except+ with gil:
    cdef object self
    self = <object>cself

    # Create inputs and outputs
    inputs = to_unsafe_variables(cinputs)
    outputs = to_unsafe_variables(coutputs)

    # Call setup_impl in function.
    self.forward_impl(inputs, outputs)

cdef void backward_callback(void *cself, const Variables &cinputs,
                            const Variables &coutputs,
                            const vector[cpp_bool] &propagate_down,
                            const vector[cpp_bool] &accum) except+ with gil:
    cdef object self
    self = <object>cself

    # Create inputs and outputs
    inputs = to_unsafe_variables(cinputs)
    outputs = to_unsafe_variables(coutputs)

    # Call setup_impl in function.
    self.backward_impl(inputs, outputs,
                       [propagate_down[i] for i in range(propagate_down.size())],
                       [accum[i] for i in range(accum.size())])

cdef void cleanup_callback(void *cself) with gil:
    """Decrement a reference count of PythonFunction.
    """
    Py_DECREF(<object> cself)
    

class PythonFunction:
    """
    """
    def __call__(self, *inputs, n_outputs=-1, outputs=None):
        from .auto_forward import get_auto_forward
        info = Info()
        info.type_name = 'PythonFunction'
        from pickle import dumps
        info.args = {'pickle': dumps(self)}
        info.tags = {}
        # Increment reference count to prevent deleting this object as long as
        # the CgFunction instance created below exists.
        # The reference count is decremented at the cleanup_callback function
        # which will be called when the Callback function created below is
        # deleted.
        Py_INCREF(self)
        f = Function.create(create_Callback(CContext(), <void*>self,
                            self.min_outputs(),
                            setup_callback,
                            forward_callback,
                            backward_callback,
                            cleanup_callback), info)
        return f(*inputs, n_outputs=n_outputs,
                 auto_forward=get_auto_forward(), outputs=outputs)

    @property
    def name(self):
        raise NotImplementedError("Implement `name`.")

    def min_outputs(self):
        raise NotImplementedError("Implement `min_outputs`.")

    def setup_impl(self, inputs, outputs):
        raise NotImplementedError("Implement `setup`.")

    def forward_impl(self, inputs, outputs):
        raise NotImplementedError("Implement `forward`.")

    def backward_impl(self, inputs, outputs, propagate_down, accum):
        raise NotImplementedError("Implement `backward`.")
# ==============================================================================
# Python Function End
# ==============================================================================


class Dummy(PythonFunction):
    """
    """
    def __init__(self):
        pass

    @property
    def name(self):
        return "PythonDummy"

    def min_outputs(self):
        return 1

    def setup_impl(self, inputs, outputs):
        pass

    def forward_impl(self, inputs, outputs):
        pass
    
    def backward_impl(self, inputs, outputs, propagate_down, accum):
        pass


<%
from utils.type_conv import type_from_proto
%>    
%for name, func in function_info.items():
def ${name}(CContext ctx${''.join([', {} {}'.format(type_from_proto[v['type']]['pyx'], k) for k, v in func.get('arguments', {}).items()])}):
    info = Info()
    info.args = {}
%for arg in func.get('arguments', {}).keys():
    info.args['${arg}'] = ${arg}
%endfor
    info.type_name = '${name}'
    info.tags = {}
    f = Function.create(create_${name}(ctx${''.join([', %s' % k for k in func.get('arguments', {}).keys()])}), info)
    return f
%endfor

