// Copyright (c) 2017 Sony Corporation. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *WARNING*
// THIS FILE IS AUTO-GENERATED BY CODE GENERATOR.
// PLEASE DO NOT EDIT THIS FILE BY HAND!
// If you want to modify this file, edit following files.
// - build-tools/code_generator/templates/src_nbla_utils_nnp_impl_create_function_cpp_template.cpp
// - build-tools/code_generator/generator/generate_src_nbla_utils_nnp_impl_create_function_cpp.py


#include "nnp_impl.hpp"

#include <nbla/logger.hpp>
#include <fstream>

#include <nbla/computation_graph/computation_graph.hpp>
#include <nbla/variable.hpp>
#include <nbla/function.hpp>
% for name, snake_name, _ in function_list:
#include <nbla/function/${snake_name}.hpp>
% endfor

<%
from utils.type_conv import type_from_proto

def proto_to_ctype(name, arg):
    if arg['type'] == 'Shape':
        return 'std::vector<int> arg_{0}(param.{0}().dim().begin(), param.{0}().dim().end())'.format(name)
    if arg['type'] == 'repeated int64':
        return 'std::vector<int> arg_{0}(param.{0}().begin(), param.{0}().end())'.format(name)
    return '{0} arg_{1} = param.{1}()'.format(type_from_proto[arg['type']]['cpp_var'], name)
    
%>
namespace nbla { namespace utils { namespace nnp {
shared_ptr<nbla::CgFunction> NetworkImpl::create_cgfunction(const ::Function& func) {
% for name, func in function_info.items():
  if (func.type() == "${name}") {
% if 'arguments' in func:
    ${name}Parameter param = func.${func['snake_name']}_param();
% for argname, arg in func['arguments'].items():
    ${proto_to_ctype(argname, arg)};
% if name == 'Reshape' and argname == 'shape':

    int prod_shape = 1;
    for( auto &v : arg_shape ) {
      prod_shape *= v;
      if( v < 0 ) {
        v = batch_size();
      }
    }
    int prod_input = 1;
    for( auto inp : func.input() ) {
      auto var_it = variable_protos_.find(inp);
      const ::Variable *var = var_it->second;
      for ( auto d : var->shape().dim() ) {
        prod_input *= d;
      }
    }
    if( prod_input != prod_shape ) {
      arg_shape.insert(arg_shape.begin(), batch_size());
    }
% endif
% endfor
% endif
    nbla::FunctionPtr fp = create_${name}(ctx_${''.join([', arg_' + argname for argname in func.get('arguments', {}).keys()])});
    return std::make_shared<nbla::CgFunction>(fp);
  }
% endfor
  return nullptr;
}
}}}
