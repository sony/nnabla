// Copyright (c) 2017 Sony Corporation. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// *WARNING*
// THIS FILE IS AUTO-GENERATED BY CODE GENERATOR.
// PLEASE DO NOT EDIT THIS FILE BY HAND!
// If you want to modify this file, edit following files.
// - build-tools/code_generator/templates/src_nbla_proto_nnabla_proto_template.proto
// - build-tools/code_generator/generator/generate_src_nbla_proto_nnabla_proto.py

syntax = "proto3";

message Shape {
  repeated int64 dim = 1 [packed = true];
}

message Communicator {}

message Context {
  repeated string backends = 1;
  string array_class = 2;
  string device_id = 3;
  string backend = 4;  // Obsolete
  string compute_backend = 5;  // Obsolete
}

message NNablaProtoBuf {
  string version = 1;
  GlobalConfig global_config = 2;
  TrainingConfig training_config = 10;

  repeated Network network = 100;
  repeated Parameter parameter = 200;
  repeated Dataset dataset = 300;
  repeated Optimizer optimizer = 400;
  repeated Monitor monitor = 500;
  repeated Executor executor = 600;
}

message GlobalConfig {
  Context default_context = 1;
}

message TrainingConfig {
  int64 max_epoch = 1;
  int64 iter_per_epoch = 2;

  bool save_best = 100;

  int64 monitor_interval = 200;
}

message Network {
  string name = 1;

  int64 batch_size = 10;
  repeated RepeatInfo repeat_info = 11;

  repeated Variable variable = 100;
  repeated Function function = 200;
}

message RepeatInfo {
  string id = 1;
  int64 times = 2;
}

message RepeatParameter {
  string repeat_id = 1;
  int64 times = 2;
}

message RecurrentParameter {
  string repeat_id = 1;
  int64 length = 2;
  int64 axis = 3;
}

message Variable {
  string name = 1;
  string type = 2;
  repeated string repeat_id = 3;

  Shape shape = 20;

  Initializer initializer = 100;
}

message Initializer {
  string type = 2;
  float multiplier = 10;
}

message Parameter {
  string variable_name = 1;
  Shape shape = 20;
  repeated float data=100;
  bool need_grad=101;
}

message Dataset {
  string name = 1;
  string type = 2;

  string uri = 10;
  int64 batch_size = 20;
  string cache_dir = 30;
  bool overwrite_cache = 31;
  bool create_cache_explicitly = 32;

  bool shuffle = 100;
  bool no_image_normalization = 101;

  repeated string variable=200;
}

message Optimizer {
  string name = 1;

  int64 order = 3;

  string network_name = 10;
  repeated string dataset_name = 20;

  Solver solver = 30;
  int64 update_interval = 40;
  
  repeated DataVariable data_variable = 50;
  repeated GeneratorVariable generator_variable = 60;
  repeated LossVariable loss_variable = 70;
  repeated ParameterVariable parameter_variable = 80;

  int64 start_iter = 100;
  int64 end_iter = 101;
}


message SolverStateParameter {
  Shape shape = 20;
  repeated float data = 100;
}

message SolverState {
  uint32 t = 1;
  map<string, SolverStateParameter> state_parameter = 2;
}

message Solver {
  string type = 2;

  Context context = 10;

  float weight_decay = 20;

  map<string, SolverState> states = 40;

  oneof parameter {
% for i, (name, solver) in enumerate(solver_info.items()):
    ${name}Parameter ${solver['snake_name']}_param = ${i + 100};
% endfor
  }

  string lr_scheduler_type = 200;
  PolynomialSchedulerParameter polynomial_scheduler_param = 210;
  CosineSchedulerParameter cosine_scheduler_param = 211;
  ExponentialSchedulerParameter exponential_scheduler_param = 212;
  StepSchedulerParameter step_scheduler_param = 213;
  CustomSchedulerParameter custom_scheduler_param = 299;

  string lr_warmup_scheduler_type = 300;
  LinearWarmupSchedulerParameter linear_warmup_scheduler_param = 310;

  float lr_decay = 30;  // Obsolete
  int64 lr_decay_interval = 31;  // Obsolete
}
% for name, solver in solver_info.items():

message ${name}Parameter {
% for i, (argname, arg) in enumerate(solver.get('arguments', {}).items()): 
  ${arg['type']} ${argname} = ${i + 1};
% endfor
}
% endfor

message PolynomialSchedulerParameter {
  float max_iter = 1;
  float power = 2;
}

message CosineSchedulerParameter {
  float max_iter = 1;
}

message ExponentialSchedulerParameter {
  float gamma = 1;
  int64 iter_interval = 2;
}

message StepSchedulerParameter {
  float gamma = 1;
  repeated int64 iter_steps = 2;
}

message CustomSchedulerParameter {
  float max_iter = 1;
  string network_name = 10;

  repeated DataVariable data_variable = 50;
  repeated OutputVariable output_variable = 80;
}

message LinearWarmupSchedulerParameter {
  int64 warmup_iter = 1;
}

message DataVariable {
  string variable_name = 1;
  string data_name = 3;
}

message GeneratorVariable {
  string variable_name = 1;
  string type = 2;
  float multiplier = 3;
}

message LossVariable {
  string variable_name = 1;
}

message ParameterVariable {
  string variable_name = 1;
  float learning_rate_multiplier = 2;
}

message Monitor {
  string name = 1;

  string network_name = 10;
  repeated string dataset_name = 20;

  repeated DataVariable data_variable = 50;
  repeated GeneratorVariable generator_variable = 60;
  repeated MonitorVariable monitor_variable = 70;
}

message MonitorVariable {
  string variable_name = 1;
  string type = 2;
  string data_name = 3;

  float multiplier = 100;
}

message Executor {
  string name = 1;

  string network_name = 10;

  int64 num_evaluations = 20;
  string repeat_evaluation_type = 21;

  bool need_back_propagation = 30;

  repeated DataVariable data_variable = 50;
  repeated GeneratorVariable generator_variable = 60;
  repeated LossVariable loss_variable = 70;
  repeated OutputVariable output_variable = 80;
  repeated ParameterVariable parameter_variable = 90;

  bool no_image_normalization = 101;
}

message OutputVariable {
  string variable_name = 1;
  string type = 2;
  string data_name = 3;
}

message Function {
  string name = 1;
  string type = 2;
  repeated string repeat_id = 3;

  Context context = 10;
  repeated string input = 20;
  repeated string output = 30;

  oneof parameter
  {
% for i, (name, func) in enumerate(function_info.items()):
% if 'arguments' in func:
    ${name}Parameter ${func['snake_name']}_param = ${i + 1001};
% endif
% endfor
  }

  // Loop Functions
  RepeatParameter repeat_param = 100;
  RecurrentParameter recurrent_param = 101;
}

% for name, func in function_info.items():
% if 'arguments' in func:

message ${name}Parameter {
% for i, (argname, arg) in enumerate(func.get('arguments', {}).items()): 
  ${arg['type']} ${argname} = ${i + 1};
% endfor
}
% endif
% endfor
