# Copyright 2018,2019,2020,2021 Sony Corporation.
# Copyright 2021 Sony Group Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# for nnabla>=1.5.0

FROM centos:7

ARG PIP_INS_OPTS
ARG PYTHONWARNINGS
ARG CURL_OPTS
ARG WGET_OPTS
ARG YUM_OPTS

ENV LC_ALL C
ENV LANG C
ENV LANGUAGE C


RUN eval ${YUM_OPTS} \
    && yum install -y \
       epel-release \
       yum-utils \
    && yum install -y \
        curl \
        freetype-devel \
        git \
        hdf5 \
        hdf5-devel \
        lapack-devel \
        libjpeg-devel \
        xz-devel \
        libpng-devel \
        redhat-lsb-core \
        rpm-build \
        unzip \
        wget \
        which \
        zip \
        zlib-static \
        libmpc-devel \
        mpfr-devel \
        gmp-devel \
        openssl-devel \
        bzip2-devel \
        libffi-devel \
    && yum group install -y "Development Tools" \
    && yum clean all

############################################################# gcc
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && wget ${WGET_OPTS} http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-6.5.0/gcc-6.5.0.tar.gz \
    && tar zxf gcc-6.5.0.tar.gz \
    && cd gcc-6.5.0 \
    && ./configure --disable-multilib --enable-languages=c,c++ \
    && make -j8 \
    && make install \
    && cd / \
    && rm -rf /tmp/*

############################################################# cmake
ARG CMAKEVER=3.14.3
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && yum install -y cmake3 \
    && curl ${CURL_OPTS} -L https://github.com/Kitware/CMake/releases/download/v${CMAKEVER}/cmake-${CMAKEVER}.tar.gz -o cmake-${CMAKEVER}.tar.gz \
    && tar xf cmake-${CMAKEVER}.tar.gz \
    && cd cmake-${CMAKEVER} \
    && mkdir build \
    && cd build \
    && cmake3 -DBUILD_TESTING=FALSE .. \
    && make -j8 \
    && make install \
    && yum remove -y cmake3 \
    && yum clean all \
    && rm -rf /var/cache/yum/* \
    && cd / \
    && rm -rf /tmp/*

############################################################ protobuf
ARG PROTOVER=3.10.1
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && curl ${CURL_OPTS} -L https://github.com/google/protobuf/archive/v${PROTOVER}.tar.gz -o protobuf-v${PROTOVER}.tar.gz \
    && tar xvf protobuf-v${PROTOVER}.tar.gz \
    && cd protobuf-${PROTOVER} \
    && mkdir build \
    && cd build \
    && cmake \
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
        -Dprotobuf_BUILD_TESTS=OFF \
        -DCMAKE_CXX_STANDARD=14 \
        -D CMAKE_C_COMPILER=gcc CMAKE_CXX_COMPILER=g++ /usr/bin/gcc \
        ../cmake \
    && make -j8 \
    && make install \
    && cd / \
    && rm -rf /tmp/*

############################################################ libarchive
ARG LIBARCHIVEVER=3.4.3
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && curl ${CURL_OPTS} -L https://github.com/libarchive/libarchive/archive/v${LIBARCHIVEVER}.tar.gz -o libarchive-${LIBARCHIVEVER}.tar.gz \
    && tar xfa libarchive-${LIBARCHIVEVER}.tar.gz \
    && mkdir libarchive-build \
    && cd libarchive-build \
    && cmake \
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DENABLE_NETTLE=FALSE -DENABLE_OPENSSL=FALSE \
        -DENABLE_LZO=FALSE -DENABLE_LZMA=FALSE -DENABLE_BZip2=FALSE \
        -DENABLE_LIBXML2=FALSE -DENABLE_EXPAT=FALSE -DENABLE_PCREPOSIX=FALSE -DENABLE_LibGCC=FALSE \
        -DENABLE_CNG=FALSE -DENABLE_TAR=FALSE -DENABLE_TAR_SHARED=FALSE -DENABLE_CPIO=FALSE \
        -DENABLE_CPIO_SHARED=FALSE -DENABLE_CAT=FALSE -DENABLE_CAT_SHARED=FALSE -DENABLE_XATTR=FALSE \
        -DENABLE_ACL=FALSE -DENABLE_ICONV=FALSE -DENABLE_TEST=FALSE \
        ../libarchive-${LIBARCHIVEVER} \
    && make -j8 \
    && make install \
    && cd / \
    && rm -rf /tmp/*

############################################################ patchelf
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && wget ${WGET_OPTS} http://nixos.org/releases/patchelf/patchelf-0.9/patchelf-0.9.tar.bz2 \
    && tar xfa patchelf-0.9.tar.bz2 \
    && cd patchelf-0.9 \
    && ./configure \
    && make \
    && make install \
    && cd / \
    && rm -rf /tmp/*

ARG PYTHON_VERSION_MAJOR=3
ARG PYTHON_VERSION_MINOR=6
ENV PYVERNAME=${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}

ADD python/setup_requirements.txt /tmp/deps/
ADD python/requirements.txt /tmp/deps/
ADD python/test_requirements.txt /tmp/deps/

################################################## build python from source
RUN if [ "${PYVERNAME}" == "3.6" ]; then wget ${WGET_OPTS} https://www.python.org/ftp/python/3.6.12/Python-3.6.12.tgz; fi \
	&& if [ "${PYVERNAME}" == "3.7" ]; then wget ${WGET_OPTS} https://www.python.org/ftp/python/3.7.10/Python-3.7.10.tgz; fi \
	&& if [ "${PYVERNAME}" == "3.8" ]; then wget ${WGET_OPTS} https://www.python.org/ftp/python/3.8.8/Python-3.8.8.tgz; fi \
	&& if [ "${PYVERNAME}" == "3.9" ]; then wget ${WGET_OPTS} https://www.python.org/ftp/python/3.9.8/Python-3.9.8.tgz; fi \
	&& tar -xzf Python-${PYVERNAME}*.tgz \
	&& cd Python-${PYVERNAME}* \
	&& ./configure --enable-optimizations \
	&& make altinstall \
	&& ln -s -f /usr/local/bin/python${PYVERNAME} /usr/bin/python \
	&& ln -s /usr/local/bin/pip${PYVERNAME} /usr/local/bin/pip \
	&& pip install ${PIP_INS_OPTS} -U -r /tmp/deps/setup_requirements.txt \
	&& pip install ${PIP_INS_OPTS} -U -r /tmp/deps/requirements.txt \
	&& pip install ${PIP_INS_OPTS} -U -r /tmp/deps/test_requirements.txt \
	&& cd .. \
	&& rm -rf Python-${PYVERNAME}* \
	&& rm -rf /tmp/*

ENV PATH /tmp/.local/bin:$PATH
ENV LD_LIBRARY_PATH /usr/local/lib64:$LD_LIBRARY_PATH
ENV CC /usr/local/bin/gcc
ENV CXX /usr/local/bin/g++
